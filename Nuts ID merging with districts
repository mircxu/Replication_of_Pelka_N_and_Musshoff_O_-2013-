library(readr)
library(dplyr)
library(openxlsx)

# Load the datasets
summary_data <- read_csv("final_summary_statistics_with_top_summary (3).csv")
final_data <- read_csv("final_data_with_temp_station_IDs.csv")

# Convert district numbers to the same type
summary_data$`District Number` <- as.numeric(summary_data$`District Number`)
final_data$district_no <- as.numeric(final_data$district_no)

# Extract unique District Numbers from the summary dataset
district_numbers <- unique(summary_data$`District Number`)

# Filter the final data based on district_no and keep unique matches
matched_data <- final_data %>% 
  filter(district_no %in% district_numbers) %>% 
  select(district_no, nuts_id) %>% 
  distinct(district_no, .keep_all = TRUE)  # Ensure each district_no appears only once

# Merge the nuts_id back into summary data without removing the first rows
summary_data <- summary_data %>% 
  left_join(matched_data, by = c("District Number" = "district_no"))

# Ensure the first rows remain as "Average", "Minimum", "Maximum", "SD" if they were replaced
summary_data$nuts_id[1:4] <- c("Average", "Minimum", "Maximum", "SD")

# Save updated summary data to a new file
output_summary_file <- "updated_final_summary_statistics.xlsx"
write.xlsx(summary_data, output_summary_file)

# Save matched data to an Excel file
output_file <- "matched_nuts_data.xlsx"
write.xlsx(matched_data, output_file)

cat("Matching complete. Download the files: matched_nuts_data.xlsx and updated_final_summary_statistics.xlsx")

library(readr)
library(dplyr)
library(openxlsx)

# Load the updated summary data
summary_data <- read.xlsx("updated_final_summary_statistics.xlsx")

# Ensure column names are correctly formatted
colnames(summary_data) <- make.names(colnames(summary_data))

# Define NUTS1 regions mapping
nuts1_mapping <- data.frame(
  NUTS1_Code = c("DE1", "DE2", "DE3", "DE4", "DE5", "DE6", "DE7", "DE8", 
                 "DE9", "DEA", "DEB", "DEC", "DED", "DEE", "DEF", "DEG"),
  Region_Name = c("Baden-WÃ¼rttemberg", "Bavaria", "Berlin", "Brandenburg", 
                  "Bremen", "Hamburg", "Hesse", "Mecklenburg-Vorpommern", 
                  "Lower Saxony", "North Rhine-Westphalia", "Rhineland-Palatinate", 
                  "Saarland", "Saxony", "Saxony-Anhalt", "Schleswig-Holstein", "Thuringia")
)

# Identify the correct column name for District Number
district_col <- grep("District", colnames(summary_data), value = TRUE)

# Ensure District Number is treated as character before filtering
summary_data[[district_col]] <- as.character(summary_data[[district_col]])

# Remove summary statistics rows (e.g., Average, Minimum, Maximum, SD)
filtered_data <- summary_data %>% 
  filter(!(.data[[district_col]] %in% c("Average", "Minimum", "Maximum", "SD")))

# Convert District Number to numeric
filtered_data[[district_col]] <- as.numeric(filtered_data[[district_col]])

# Identify the correct column name for nuts_id
nuts_col <- grep("nuts", colnames(summary_data), value = TRUE, ignore.case = TRUE)

# Ensure nuts_id is character before substring extraction
filtered_data[[nuts_col]] <- as.character(filtered_data[[nuts_col]])

# Extract NUTS1 region based on the first 3 characters of nuts_id
filtered_data <- filtered_data %>% 
  mutate(Region = substr(.data[[nuts_col]], 1, 3)) %>% 
  left_join(nuts1_mapping, by = c("Region" = "NUTS1_Code"))

# Save updated data with regions to an Excel file
output_file <- "matched_regions.xlsx"
write.xlsx(filtered_data, output_file)

cat("Matching complete. Download the file: matched_regions.xlsx")

