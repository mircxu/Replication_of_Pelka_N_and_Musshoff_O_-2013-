# Load required libraries
library(tidyverse)
library(boot)

# Step 1: Load the data
district_wi <- read_csv('district_wi_predictions_st.csv')

# Step 2: Calculate the strike levels for the temperature-based index
district_wi <- district_wi %>%
  group_by(district_no) %>%
  mutate(
    strike_level_IT = mean(IT_t, na.rm = TRUE)  # Strike level for temperature-based index
  ) %>%
  ungroup()

# Step 3: Calculate the call option payouts for the temperature-based index
df_deriv_dist_call <- district_wi %>%
  rowwise() %>%
  mutate(
    n_call_IT = max(IT_t - strike_level_IT, 0),  # Call option payout for temperature index
    n_IT = n_call_IT  # Use only the call option for temperature index
  )

# Save the call option results for temperature index
write_csv(df_deriv_dist_call, 'tailored_call_options_temperature.csv')

# Display the first few rows of the result
print(head(df_deriv_dist_call))

# Step 4: Define the number of bootstrap iterations and parameters
n_iterations <- 10000  # Number of bootstrap iterations
r <- 0.05  # 5% risk-free rate
years <- 15  # Time period from 2006 to 2021
ci_level <- 0.95  # Confidence interval level
beta <- (1 - ci_level) / 2

# Step 5: Define the mean function for bootstrapping
mean_func <- function(data_, indices) {
  return(mean(data_[indices], na.rm = TRUE)) # Calculate the mean for the bootstrap sample
}

# Step 6: Perform bootstrap resampling for temperature index
bootstrap_results_temperature <- boot(df_deriv_dist_call$n_IT, statistic = mean_func, R = n_iterations)

# Step 7: Calculate the mean of the bootstrap samples for temperature index
bootstrap_means_temperature <- bootstrap_results_temperature$t
expected_payout_temperature <- mean(bootstrap_means_temperature)

# Step 8: Discount the expected payout to present value using the risk-free rate
fair_premium_temperature <- expected_payout_temperature / (1 + r) ^ years

# Assign the fair premium to the dataframe
df_deriv_dist_call$fair_premium_IT <- fair_premium_temperature

# Plot histogram of bootstrap means for temperature-based index
hist(bootstrap_means_temperature, breaks = 30, xlab = 'Mean Payout', border = 'white',
     main = "Histogram of Bootstrap Means (Temperature-Based Index)")
abline(v = fair_premium_temperature, col = 'red', lwd = 2)

# Step 9: Calculate confidence intervals for temperature-based index
ci_lo_temperature <- quantile(bootstrap_results_temperature$t, beta)
ci_up_temperature <- quantile(bootstrap_results_temperature$t, ci_level + beta)

cat("Bootstrap Mean (Temperature-Based Index):", fair_premium_temperature, "\n")
cat(ci_level * 100, "% Confidence Interval (Temperature-Based Index):", ci_lo_temperature, ci_up_temperature, "\n")

# Step 10: Calculate z and revenue for temperature index
calc_revenue <- function(df_, column_name) {
  cov_ <- cov(df_$yt_price, df_[[column_name]])
  var_ <- var(df_[[column_name]])
  z <- -cov_ / var_
  return(z)
}

# Apply the revenue calculation for temperature-based index
df_deriv_dist_call <- df_deriv_dist_call %>%
  mutate(yt_price = Y_t * 16) %>%  # Calculate yt_price as Y_t * 16
  group_by(district_no) %>%
  mutate(
    z_IT = calc_revenue(cur_data(), "n_IT"),
    revenue_IT = Y_t * 16 + z_IT * n_IT - z_IT * fair_premium_IT
  ) %>%
  ungroup()

# Step 11: Calculate standard deviation and hedging effectiveness for temperature index
std_without_IT <- aggregate(yt_price ~ district_no, df_deriv_dist_call, sd)
std_with_IT <- aggregate(revenue_IT ~ district_no, df_deriv_dist_call, sd)

# Combine the standard deviations into a single data frame
results_IT <- merge(std_without_IT, std_with_IT, by = "district_no")
names(results_IT) <- c("district_no", "Std_Without", "Std_With")

# Calculate hedging effectiveness
results_IT$Hedging_Effectiveness <- (results_IT$Std_Without - results_IT$Std_With) / 
  results_IT$Std_Without * 100

# Step 12: Save the results for temperature-based index
write_csv(results_IT, 'hedging_effectiveness_temperature_st.csv')

# Display the results
print("Hedging effectiveness for Temperature-Based Index:")
print(results_IT)

# Final Summary
cat("\nHedging effectiveness and fair premium calculation for Temperature-Based Index completed.\n")
writeLines(
  paste(
    "Paired t-test results (Call Option):",
    paste("t =", t_test_results_call$statistic),
    paste("df =", t_test_results_call$parameter),
    paste("p-value =", t_test_results_call$p.value),
    paste("95% confidence interval =", 
          paste(t_test_results_call$conf.int[1], t_test_results_call$conf.int[2], sep = ", ")),
    paste("Mean difference =", t_test_results_call$estimate),
    sep = "\n"
  ),
  con = "paired_t_test_st_temp.txt"
)

