# Load necessary libraries
library(tidyverse)

# Load datasets
optimal_summary <- read_csv('final_summary_statistics_with_top_summary.csv')
standardized_summary <- read_csv('final_summary_statistics_with_top_summary_st.csv')

# Define the indices to compare
comparison_columns <- c(
  "Precipitation-based index (%)",
  "Temperature-based index (%)",
  "Mixed index at two stations (%)",
  "Mixed index at same station (%)"
)

# Extract the "Average" rows from each dataset
average_row_optimal <- optimal_summary %>% filter(`District Number` == "Average")
average_row_standardized <- standardized_summary %>% filter(`District Number` == "Average")

# Calculate p-values using a t-test
comparison_results <- tibble(
  `Metric` = c("Average value (Optimal)", "Average value (Standardized)", "p-value of the t-test"),
  `Precipitation-based index (%)` = c(
    average_row_optimal$`Precipitation-based index (%)`,
    average_row_standardized$`Precipitation-based index (%)`,
    t.test(
      optimal_summary$`Precipitation-based index (%)`, 
      standardized_summary$`Precipitation-based index (%)`, 
      var.equal = TRUE
    )$p.value
  ),
  `Temperature-based index (%)` = c(
    average_row_optimal$`Temperature-based index (%)`,
    average_row_standardized$`Temperature-based index (%)`,
    t.test(
      optimal_summary$`Temperature-based index (%)`, 
      standardized_summary$`Temperature-based index (%)`, 
      var.equal = TRUE
    )$p.value
  ),
  `Mixed index at two stations (%)` = c(
    average_row_optimal$`Mixed index at two stations (%)`,
    average_row_standardized$`Mixed index at two stations (%)`,
    t.test(
      optimal_summary$`Mixed index at two stations (%)`, 
      standardized_summary$`Mixed index at two stations (%)`, 
      var.equal = TRUE
    )$p.value
  ),
  `Mixed index at same station (%)` = c(
    average_row_optimal$`Mixed index at same station (%)`,
    average_row_standardized$`Mixed index at same station (%)`,
    t.test(
      optimal_summary$`Mixed index at same station (%)`, 
      standardized_summary$`Mixed index at same station (%)`, 
      var.equal = TRUE
    )$p.value
  )
)

# Format p-values to display "<0.001" for small values
comparison_results <- comparison_results %>%
  mutate(across(starts_with("p-value"), ~ ifelse(. < 0.001, "<0.001", formatC(., format = "f", digits = 3))))

# Save the table to a CSV file
write_csv(comparison_results, "comparison_optimal_vs_standardized_with_p_values.csv")

# Notify the user
cat("Comparison table saved as 'comparison_optimal_vs_standardized_with_p_values.csv' in the working directory.\n")

# Load necessary libraries
library(gridExtra)
library(grid)
library(readr)
library(dplyr)

# Load the dataset
file_path <- "comparison_optimal_vs_standardized_with_p_values.csv"
df <- read_csv(file_path)

# Convert numeric columns to formatted values
df <- df %>%
  mutate(across(where(is.numeric), ~ ifelse(. < 0.001, "<0.001", sprintf("%.1f", .))))

# Create a table with a white background and black borders
table_plot <- tableGrob(df, rows = NULL)

# Set formatting: black text, bold headers, and table borders
for (i in seq_len(length(table_plot$grobs))) {
  table_plot$grobs[[i]]$gp <- gpar(fontsize = 10, col = "black")  # Black text
}

# Add bold headers
for (i in seq_len(ncol(df))) {
  table_plot$grobs[[i]]$gp <- gpar(fontsize = 11, fontface = "bold", col = "black")
}

# Save as a **high-resolution JPEG** with a white background
jpeg("p_values_table.jpg", width = 4000, height = 3000, res = 300, bg = "white")
grid.newpage()
grid.draw(table_plot)
dev.off()

# Display table in R with white background
grid.newpage()
grid.rect(gp = gpar(fill = "white", col = NA))  # Force white background
grid.draw(table_plot)

print("Table saved as p_values_table.jpg")



