# Load necessary libraries
library(ggplot2)
library(gridExtra)
library(tibble)
library(dplyr)
library(readr)
library(grid)

# Load the dataset
summary_stats <- read_csv("final_summary_statistics_with_top_summary.csv")

# Select relevant columns and rename them correctly
table_data <- summary_stats %>%
  select("District Number", "Precipitation-based index (%)", 
         "Temperature-based index (%)", "Mixed index at two stations (%)", 
         "Mixed index at same station (%)") %>%
  rename("District" = "District Number",
         "Precipitation Index (%) (Replication Study)" = "Precipitation-based index (%)",
         "Temperature Index (%) (Replication Study)" = "Temperature-based index (%)",
         "Mixed Index (Two Stations) (%) (Replication Study)" = "Mixed index at two stations (%)",
         "Mixed Index (Same Station) (%) (Replication Study)" = "Mixed index at same station (%)")

# Compute summary statistics for the replication study
summary_replication <- table_data %>%
  summarise(
    `Statistic` = c("Average", "Minimum", "Maximum", "SD"),
    `Precipitation Index (%) (Replication Study)` = c(mean(table_data$`Precipitation Index (%) (Replication Study)`, na.rm = TRUE),
                                                      min(table_data$`Precipitation Index (%) (Replication Study)`, na.rm = TRUE),
                                                      max(table_data$`Precipitation Index (%) (Replication Study)`, na.rm = TRUE),
                                                      sd(table_data$`Precipitation Index (%) (Replication Study)`, na.rm = TRUE)),
    `Temperature Index (%) (Replication Study)` = c(mean(table_data$`Temperature Index (%) (Replication Study)`, na.rm = TRUE),
                                                    min(table_data$`Temperature Index (%) (Replication Study)`, na.rm = TRUE),
                                                    max(table_data$`Temperature Index (%) (Replication Study)`, na.rm = TRUE),
                                                    sd(table_data$`Temperature Index (%) (Replication Study)`, na.rm = TRUE)),
    `Mixed Index (Two Stations) (%) (Replication Study)` = c(mean(table_data$`Mixed Index (Two Stations) (%) (Replication Study)`, na.rm = TRUE),
                                                             min(table_data$`Mixed Index (Two Stations) (%) (Replication Study)`, na.rm = TRUE),
                                                             max(table_data$`Mixed Index (Two Stations) (%) (Replication Study)`, na.rm = TRUE),
                                                             sd(table_data$`Mixed Index (Two Stations) (%) (Replication Study)`, na.rm = TRUE)),
    `Mixed Index (Same Station) (%) (Replication Study)` = c(mean(table_data$`Mixed Index (Same Station) (%) (Replication Study)`, na.rm = TRUE),
                                                             min(table_data$`Mixed Index (Same Station) (%) (Replication Study)`, na.rm = TRUE),
                                                             max(table_data$`Mixed Index (Same Station) (%) (Replication Study)`, na.rm = TRUE),
                                                             sd(table_data$`Mixed Index (Same Station) (%) (Replication Study)`, na.rm = TRUE))
  )

# Original study statistics
summary_original <- tibble(
  Statistic = c("Average", "Minimum", "Maximum", "SD"),
  `Precipitation Index (%) (Original Study)` = c(15.7, 5.6, 29.4, 6.1),
  `Temperature Index (%) (Original Study)` = c(12.4, 2.3, 23.9, 5.2),
  `Mixed Index (Two Stations) (%) (Original Study)` = c(22.2, 12.8, 32.0, 4.8),
  `Mixed Index (Same Station) (%) (Original Study)` = c(20.1, 11.7, 30.7, 5.3)
)

# Merge the two datasets for comparison
final_comparison <- left_join(summary_replication, summary_original, by = "Statistic")

# Round values to one decimal place
final_comparison <- final_comparison %>%
  mutate(across(where(is.numeric), ~ round(., 1)))

# Adjust column spacing and wrap long column names
colnames(final_comparison) <- gsub(" \\(Replication Study\\)", "\n(Replication)", colnames(final_comparison))
colnames(final_comparison) <- gsub(" \\(Original Study\\)", "\n(Original)", colnames(final_comparison))

# Create a properly formatted table for visualization
table_plot <- tableGrob(final_comparison, rows = NULL)

# **Add black borders to the first row (header) and the entire table**
for (i in seq_len(ncol(table_plot))) {
  table_plot$grobs[[i]]$gp <- gpar(fontsize = 13, fontface = "bold", col = "black")  # Bold header text
  table_plot$grobs[[i]]$vp <- viewport(width = unit(1, "npc"), height = unit(1, "npc"))  # Ensure size
}

# Add **borders to the entire table** and **header**
for (i in seq_along(table_plot$grobs)) {
  table_plot$grobs[[i]]$gp <- gpar(fontsize = 13, col = "black")  # Ensure black text and border
}

# Save table as a **JPEG with a fully white background and black borders**
jpeg("summary_table.jpg", width = 3000, height = 3000, res = 150, bg = "white")  # White background
grid.newpage()
grid.draw(table_plot)
dev.off()

# **Display the table in R with white background**
grid.newpage()
grid.rect(gp = gpar(fill = "white", col = NA))  # Force white background in plot
grid.draw(table_plot)




# Load necessary libraries
library(gridExtra)
library(grid)
library(readr)
library(dplyr)

# Load the dataset
file_path <- "final_summary_statistics_with_top_summary.csv"
df <- read_csv(file_path)

# Round numeric values to 1 decimal place
df <- df %>%
  mutate(across(where(is.numeric), ~ round(., 1)))

# Convert numeric values to character to ensure proper formatting with .0
df <- df %>%
  mutate(across(where(is.numeric), as.character))

# Create a properly formatted table for visualization
table_plot <- tableGrob(df, rows = NULL)

# Set white background, black text, and black borders for the full table
for (i in seq_len(length(table_plot$grobs))) {
  table_plot$grobs[[i]]$gp <- gpar(fontsize = 10, col = "black")  # Black text
}

# Add bold text and black borders for the header
for (i in seq_len(ncol(df))) {
  table_plot$grobs[[i]]$gp <- gpar(fontsize = 11, fontface = "bold", col = "black")  # Bold headers
}

# Save table as a **JPEG file with a fully white background**
jpeg("summary_table.jpg", width = 3000, height = 2000, res = 20, bg = "white")
grid.newpage()
grid.draw(table_plot)
dev.off()

# Display the table in R (ensure white background)
grid.newpage()
grid.rect(gp = gpar(fill = "white", col = NA))  # Force white background
grid.draw(table_plot)

print("Table saved as summary_table.jpg")

