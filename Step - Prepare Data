library(tidyverse)
library(purrr)
library(readxl)
library(lubridate)
source('scripts/utils.R')


# Importing data
geo_data_raw <- read_excel('data/georeferencedata.xlsx')
final_data_raw <- read_csv('data/final_data.csv')
allstations_rain_raw <- read_csv('data/allstations_rain.csv')
allstations_temp_raw <- read_csv('data/allstations_temp.csv')

# Preparing Geo Data
names(geo_data_raw) <- gsub(' ','_',tolower(names(geo_data_raw)))

geo_data <- geo_data_raw %>% 
  select(geo_point, land_code, kreis_name, kreis_code) %>% 
  mutate(
         geo_point = str_split(geo_point, pattern = ', '),
         geo_point_latd = as.numeric(map(geo_point, ~ .x[[1]])),
         geo_point_lang = as.numeric(map(geo_point, ~ .x[[2]])),
         kreis_code = as.character(kreis_code)
         ) %>% 
  unnest(cols=c('geo_point_lang', 'geo_point_latd')) %>% 
  select(-geo_point)




# For Final Data

# Define the range of years we are interested in
required_years <- 2006:2021

# Extract districts with complete data from 2006 to 2021
final_data_no_gap <- 
  final_data_raw %>%
  filter(year %in% required_years & var=='ww' & measure=='yield') %>%
  drop_na(value) %>% 
  select(district_no, year) %>%
  distinct() %>% 
  group_by(district_no) %>% 
  summarise(has_year_gap=ifelse(all(required_years %in% year), 1,0)) %>% 
  ungroup() %>% 
  filter(has_year_gap==1) %>% 
  pull(district_no)



# Apply all exclusion rules
final_data <- final_data_raw %>%
  drop_na(value) %>% # Remove NAs within value column
  filter(district_no %in% final_data_no_gap) %>% # Remove cities with gaps
  filter(year %in% required_years & var=='ww' & measure=='yield') %>% 
  mutate(district_no = remove_leading_zero(district_no)) %>%
  separate(district,into=c('state','station'),sep=', ') %>% 
  left_join(geo_data, by=c('district_no'='kreis_code')) %>% 
  select(-c(outlier, land_code))


# Checking filters applied properly
final_data %>% pull(var) %>% unique()
final_data %>% pull(measure) %>% unique()

# No missing
final_data %>% is.na() %>% colSums()




# Temperature and Rain Data

# Drop columns with NAs and Aggregate Data
allstations_rain <- allstations_rain_raw %>% 
  select_if(~!any(is.na(.x))) %>%
  mutate(date_month=month(date)) %>% 
  select(-date) %>% 
  select(date_month, everything()) %>%
  group_by(date_month) %>% 
  summarize(across(everything(), sum)) %>% 
  pivot_longer(cols = -date_month, values_to = 'rain_value', names_to = 'station_id') %>% 
  rename(stations_id=station_id) %>% 
  mutate(stations_id = as.integer(stations_id))


allstations_temp <- allstations_temp_raw %>% 
  select_if(~!any(is.na(.x))) %>% 
  mutate(date_month=month(date)) %>% 
  select(date, date_month, everything()) %>% 
  select(-date) %>% 
  select(date_month, everything()) %>%
  group_by(date_month) %>% 
  summarize(across(everything(), mean)) %>% 
  pivot_longer(cols = -date_month, values_to = 'temp_value', names_to = 'station_id') %>% 
  separate(station_id,into=c('temp_col','stations_id'), sep='_') %>% 
  mutate(stations_id = as.integer(stations_id)) %>% 
  select(-temp_col)
  


# Calculate the accumulation

# Rain
rain_accum <-
  allstations_rain %>% 
  group_split(stations_id) %>% 
  map(~ map_dfr(3:10, function(ws) get_acc_sum(.x, ws))) %>% 
  bind_rows() %>% 
  distinct() %>% 
  arrange(acc_month)

rain_accum %>% write_csv('rain_accum.csv')

# Temprature
temp_accum <-
  allstations_temp %>%
  group_split(stations_id) %>% 
  map(~ map_dfr(3:10, function(ws) get_acc_avg(.x, ws))) %>% 
  bind_rows() %>% 
  distinct() %>% 
  arrange(acc_month)

temp_accum %>% write_csv('data/temp_accum.csv')

