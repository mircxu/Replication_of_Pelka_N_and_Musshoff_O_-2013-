library(tidyverse)
library(purrr)
library(readxl)
library(lubridate)
library(rdwd)

# Importing data
final_data_raw <- read.csv('Final_data.csv')

library(tidyverse)
library(purrr)
library(readxl)
library(lubridate)
library(rdwd)

# Define the range of years we are interested in
required_years <- 2006:2021

# Filter districts with complete data from 2006 to 2021
filtered_data <- data %>%
  # Filter for specific 'var' and 'measure'
  filter(var == 'ww' & measure == 'yield') %>%
  # Remove rows with NA values in important columns 
  drop_na(value) %>%
  # Group by district
  group_by(district) %>%
  # Filter districts with data for all required years
  filter(all(required_years %in% year)) %>%
  ungroup() %>%
  # Ensure data includes only rows from required years
  filter(year %in% required_years) %>%
  # Multiply values by 10
  mutate(value = value * 10) %>%
  # Remove unnecessary columns
  select(-c(outlier))

# Write the filtered data to a new CSV file
write.csv(filtered_data, "filtered_data.csv", row.names = FALSE)

# Print a message indicating the script has finished
cat("Data processing complete. Filtered data saved to 'filtered_data.csv'.\n")

# Define the function to get the nearest station (Ensure nearbyStations() exists)
get_station_id <- function(lat_, lon_, statname_, radius_ = 100) {
  print(i)
  i <<- i + 1
  
  # Retrieve the list of nearby stations 
  coord_list_raw <- nearbyStations(
    lat = lat_,
    lon = lon_,
    radius = radius_,
    res = c("daily"),
    var = c("kl"),
    mindate = as.Date("2022-01-01"),
    statname = statname_
  )
  
  if (is.null(coord_list_raw)) return(NULL)
  
  # Processing the retrieved data
  coord_list <- sortDF(coord_list_raw, "var")
  coord_list <- coord_list[!duplicated(paste0(coord_list$Stations_id, coord_list$res)),]
  coord_list <- sortDF(coord_list, "res")
  coord_list <- sortDF(coord_list, "dist", decreasing = FALSE)
  rownames(coord_list) <- NULL
  
  # Create dataframe with desired columns
  coord_df <- coord_list %>%
    data.frame() %>%
    rename_all(~tolower(.x)) %>%
    filter(!is.na(stations_id)) %>%
    rename(kreis_code = stationsname) %>%
    mutate(kreis_code_in = statname_) %>%
    select(stations_id, von_datum, bis_datum, geobreite, geolaenge, kreis_code, res, var, per, dist, kreis_code_in) %>%
    arrange(desc(bis_datum), dist)
  
  return(coord_df)
}

# Extract Station ID
i <- 1
stations_df <- final_data %>%
  select(district_no, geo_point_lang, geo_point_latd) %>%
  rename(lon_ = geo_point_lang,
         lat_ = geo_point_latd,
         statname_ = district_no) %>%
  distinct() %>%
  as.list() %>%
  pmap(get_station_id) %>%
  bind_rows() %>%
  tibble()

# Merge and save the stations data
stations_df %>%
  select(stations_id, von_datum, bis_datum, geobreite, geolaenge, kreis_code, res, var, per, dist, kreis_code_in) %>%
  right_join(final_data %>% select(district_no, state) %>% distinct(),
             by = c('kreis_code_in' = 'district_no')) %>%
  write_csv('stations_df_all.csv')
