library(tidyverse)
library(purrr)
library(readxl)
library(lubridate)
library(rdwd)
library(berryFunctions)

# Importing data
geo_data_raw <- read_excel('data/georeferencedata.xlsx')
final_data_raw <- read.csv('Final_data.csv')

# Preparing Geo Data
names(geo_data_raw) <- gsub(' ', '_', tolower(names(geo_data_raw)))

geo_data <- geo_data_raw %>%
  select(geo_point, land_code, kreis_name, kreis_code) %>%
  mutate(
    geo_point = str_split(geo_point, pattern = ', '),
    geo_point_latd = as.numeric(map(geo_point, ~ .x[[1]])),
    geo_point_lang = as.numeric(map(geo_point, ~ .x[[2]])),
    kreis_code = as.character(kreis_code)
  ) %>%
  unnest(cols = c('geo_point_lang', 'geo_point_latd')) %>%
  select(-geo_point)

# Define the range of years we are interested in
required_years <- 2006:2021

# Extract districts with complete data from 2006 to 2021
final_data_no_gap <- final_data_raw %>%
  filter(year %in% required_years & var == 'ww' & measure == 'yield') %>%
  drop_na(value) %>%
  select(district_no, year) %>%
  distinct() %>%
  group_by(district_no) %>%
  summarise(has_year_gap = ifelse(all(required_years %in% year), 1, 0)) %>%
  ungroup() %>%
  filter(has_year_gap == 1) %>%
  pull(district_no)

# Apply all exclusion rules and process data
final_data <- final_data_raw %>%
  drop_na(value) %>%
  filter(district_no %in% final_data_no_gap) %>%
  filter(year %in% required_years & var == 'ww' & measure == 'yield') %>%
  mutate(
    district_no = sub("^0+", "", district_no) # Remove leading zeros
  ) %>%
  separate(district, into = c('state', 'station'), sep = ', ') %>%
  left_join(geo_data, by = c('district_no' = 'kreis_code')) %>%
  select(-c(outlier, land_code))

# Save the filtered data
write.csv(final_data, "Final_data_Station.csv", row.names = FALSE)

# Define the function to get the nearest station (Ensure nearbyStations() exists)
get_station_id <- function(lat_, lon_, statname_, radius_ = 30) {
  print(i)
  i <<- i + 1
  
  # Retrieve the list of nearby stations 
  coord_list_raw <- nearbyStations(
    lat = lat_,
    lon = lon_,
    radius = radius_,
    res = c("daily"),
    var = c("kl"),
    mindate = as.Date("2022-01-01"),
    statname = statname_
  )
  
  if (is.null(coord_list_raw)) return(NULL)
  
  # Processing the retrieved data
  coord_list <- sortDF(coord_list_raw, "var")
  coord_list <- coord_list[!duplicated(paste0(coord_list$Stations_id, coord_list$res)),]
  coord_list <- sortDF(coord_list, "res")
  coord_list <- sortDF(coord_list, "dist", decreasing = FALSE)
  rownames(coord_list) <- NULL
  
  # Create dataframe with desired columns
  coord_df <- coord_list %>%
    data.frame() %>%
    rename_all(~tolower(.x)) %>%
    filter(!is.na(stations_id)) %>%
    rename(kreis_code = stationsname) %>%
    mutate(kreis_code_in = statname_) %>%
    select(stations_id, von_datum, bis_datum, geobreite, geolaenge, kreis_code, res, var, per, dist, kreis_code_in) %>%
    arrange(desc(bis_datum), dist)
  
  return(coord_df)
}

# Extract Station ID
i <- 1
stations_df <- final_data %>%
  select(district_no, geo_point_lang, geo_point_latd) %>%
  rename(lon_ = geo_point_lang,
         lat_ = geo_point_latd,
         statname_ = district_no) %>%
  distinct() %>%
  as.list() %>%
  pmap(get_station_id) %>%
  bind_rows() %>%
  tibble()

# Merge and save the stations data
stations_df %>%
  select(stations_id, von_datum, bis_datum, geobreite, geolaenge, kreis_code, res, var, per, dist, kreis_code_in) %>%
  right_join(final_data %>% select(district_no, state) %>% distinct(),
             by = c('kreis_code_in' = 'district_no')) %>%
  write_csv('stations_df_all.csv')
