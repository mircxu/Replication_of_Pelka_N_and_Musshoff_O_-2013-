# Load necessary library
library(readr)
library(dplyr)
library(tidyr)
library(xtable)

# Load the CSV file
data <- read_csv("final_summary_statistics_with_top_summary_st.csv")

# Define the column names to compare
columns_to_compare <- c("Precipitation-based index (%)", 
                        "Temperature-based index (%)", 
                        "Mixed index at two stations (%)", 
                        "Mixed index at same station (%)")

# Filter out summary rows
data_filtered <- data %>% 
  filter(!("District Number" %in% c("Average", "Minimum", "Maximum", "SD"))) %>%
  select(all_of(columns_to_compare))

# Function to compute two-sided t-test p-values
compute_p_values <- function(df, cols) {
  p_matrix <- matrix(NA, nrow = length(cols), ncol = length(cols),
                     dimnames = list(cols, cols))
  
  for (i in 1:length(cols)) {
    for (j in i:length(cols)) {
      if (i == j) {
        p_matrix[i, j] <- 1.000
      } else {
        test_result <- t.test(df[[cols[i]]], df[[cols[j]]], var.equal = FALSE)
        p_value <- test_result$p.value
        p_matrix[i, j] <- ifelse(p_value < 0.001, "<0.001", round(p_value, 6))
      }
    }
  }
  return(as.data.frame(p_matrix))
}

# Compute the p-values matrix
p_values_matrix <- compute_p_values(data_filtered, columns_to_compare)

# Print the formatted matrix
print(xtable(p_values_matrix), type = "html")
